Demo on gdb an Apache coredump for troubleshooting.

The 1st step in core dump analysis is to allow the core dump generated first in your OS !
The 2nd step is to match/map needed libraries at the time of core (libraries are different when you move the core from Production machine to other machine, also, libraries are different after you apply a patch, etc.)
The 3rd step is to fine out the crashing threads, stack traces, request/headers details, and any other useful information so you can reproduce it and test any fixes/workarounds/patches

e.g. Apache coredump demo 

check below first to allow coredump out:

doc - 
https://httpd.apache.org/dev/debugging.html

1/ need to add 
https://httpd.apache.org/docs/current/mod/mpm_common.html#coredumpdirectory

Description:	Directory where Apache HTTP Server attempts to switch before dumping core
Syntax:	CoreDumpDirectory directory 

e.g. CoreDumpDirectory /tmp  (make sure Apache running uid have write permission there!)

2/ check OS limits under Apache running uid

see some reasons if no coredump, in particular JAVA, 
https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/bugreports004.html
(Java specific: If the process received SIGSEGV or SIGILL but no core dump, it is possible that the process handled it. For example, HotSpot VM uses the SIGSEGV signal for legitimate purposes, such as throwing NullPointerException, deoptimization, and so forth. The signal is unhandled by the Java VM only if the current instruction (PC) falls outside Java VM generated code. These are the only cases in which HotSpot dumps core.)

$ hostname
to check hostname

$ id
to check running uid

$ ulimit -Ha  (to check Hard OS limits)

address space limit (Kibytes)  (-M)  unlimited
core file size (blocks)        (-c)  unlimited  *** 
cpu time (seconds)             (-t)  unlimited
data size (Kibytes)            (-d)  unlimited
file size (blocks)             (-f)  unlimited
locks                          (-x)  unlimited
locked address space (Kibytes) (-l)  xxx
message queue size (Kibytes)   (-q)  xxx
nice                           (-e)  0
nofile                         (-n)  xxxxx
nproc                          (-u)  xxxxx
pipe buffer size (bytes)       (-p)  xxxx
max memory size (Kibytes)      (-m)  unlimited
rtprio                         (-r)  0
socket buffer size (bytes)     (-b)  xxxx
sigpend                        (-i)  xxxxx
stack size (Kibytes)           (-s)  unlimited
swap size (Kibytes)            (-w)  xxxxx
threads                        (-T)  not supported
process size (Kibytes)         (-v)  unlimited

There is a SOFT limit you need to check too, -Sc vs -Hc !

$ ulimit -Sa | grep core
core file size (blocks)        (-c)  0

3/ can try a fake crash to see if coredump enabled and can create dump file properly when running as that uid ?

$ sleep 600000 &
[1]     12769

$ kill -SEGV 12769
[1] + Memory fault             sleep 600000 &

No core dumping !!

then 

$ ulimit -c 99999999
$ ulimit -Sc
99999999
$ ulimit -Hc
99999999

$ sleep 8000000 &
[1]     12345
$ kill -SEGV 12345
[1] + Memory fault(coredump)**   sleep 8000000 &   *** see the coredump now !!

-rw------- 1 uid gid       1007616 Sep  9 23:42 core.12345

4/ if you got a core, then next steps below,

1st to find out what is the binary executable, 

$ file core.12345
core.12345: ELF 64-bit LSB core file x86-64, version 1 (SYSV), SVR4-style, from '-ksh', real uid: 2337, effective uid: 2337, real gid: 14207, effective gid: 14207, execfn: '/usr/bin/ksh', platform: 'x86_64'

make sure you use the right binary, ksh here, not sleep in my example !!!

$ gdb /usr/bin/ksh core.12345
GNU gdb (GDB) Red Hat Enterprise Linux X.X.1-XXX.XXX
Copyright (C) 2013 Free Software Foundation, Inc.
.....
<http://uid1.gnu.org/software/gdb/bugs/>...
Reading symbols from /usr/bin/ksh93...Reading symbols from /usr/bin/ksh93...(no debugging symbols found)...done.
(no debugging symbols found)...done.

warning: core file may not match specified executable file.
[New LWP 12345]
Core was generated by `-ksh'.
Program terminated with signal 11, Segmentation fault.
#0  0x00007f9eae398480 in __pause_nocancel () from /lib64/libc.so.6
Missing separate debuginfos, use: debuginfo-install ksh-20120801-137.el7.x86_64
(see https://access.redhat.com/solutions/1506273 need root to install debug binaries with symbols and source/others, etc....)

(gdb) bt
#0  0x00007f9eae398480 in __pause_nocancel () from /lib64/libc.so.6
#1  0x0000000000471786 in sleep ()   <--- see the call we ran and crashed it on purpose ! 
#2  0x000000000047189f in sh_delay ()
#3  0x0000000000471a37 in b_sleep ()
#4  0x000000000045d760 in sh_exec ()
#5  0x000000000045a12c in sh_exec ()
#6  0x0000000000406cd0 in exfile ()
#7  0x00000000004077df in sh_main ()
#8  0x00007f9eae2f53d5 in __libc_start_main () from /lib64/libc.so.6
#9  0x00000000004064f0 in _start ()
...

$ nm /usr/bin/ksh
nm: /usr/bin/ksh: no symbols (this will check if any symbols !) 

5/ see what are some common signals 

http://man7.org/linux/man-pages/man7/signal.7.html
     SIGSEGV      11       Core    Invalid memory reference
	 SIGBUS      10,7,10     Core    Bus error (bad memory access)
	 SIGILL        4       Core    Illegal Instruction

(no coredump when testing with below signals, SIGBUS, SIGILL, etc.) 
	 
$ sleep 123 &
[1]     29651
$ kill -SIGBUS 29651
[1] + Bus error                sleep 123 &

$ ls -l core*
-rw------- 1 uid1 uid1 1007616 Sep  1  23:42 core.12345
-rw------- 1 uid1 uid1 1007616 Sep  1 14:26 core.26879

$ kill -SIGILL 29754
[1] + Illegal instruction      sleep 123 &

$ cat /proc/sys/kernel/core_pattern
core

why no coredump ?
see 
http://uid1.fromdual.com/hunting-the-core

6/ also can gcore if needed to create a snapshot (to debug hung, etc.. before any restart)

$ sleep 456 &
[1]     31074
$ gcore 31074
0x00007f9eae398480 in __pause_nocancel () from /lib64/libc.so.6
Saved corefile core.31074

$ pwd
/xxx/xxx/xxx/users/uid1

$ ls -lrt *core*
-rw------- 1 uid1 uid1 1007616 Sep  1 23:42 core.12345
-rw------- 1 uid1 uid1 1007616 Sep  1 14:26 core.26879
-rw-r--r-- 1 uid1 uid1  984664 Sep  1 15:12 core.31074

this can quick check the stack trace of a hung process, 

$ pstack 31074
#0  0x00007f9eae398480 in __pause_nocancel () from /lib64/libc.so.6
#1  0x0000000000471786 in sleep ()
#2  0x000000000047189f in sh_delay ()
#3  0x0000000000471a37 in b_sleep ()
#4  0x000000000045d760 in sh_exec ()
#5  0x000000000045a12c in sh_exec ()
#6  0x0000000000406cd0 in exfile ()
#7  0x00000000004077df in sh_main ()
#8  0x00007f9eae2f53d5 in __libc_start_main () from /lib64/libc.so.6
#9  0x00000000004064f0 in _start ()

then gdb like below,

script /tmp/gdbstack.txt
gdb /usr/bin/ksh core.31074
				(gdb) set pagination off [enter]
				(gdb) info threads [enter]
				(gdb) thread apply all bt [enter]
				(gdb) quit [enter]

				
7/ see a real Apache core


$ ls -lrt core*
-rw-r--r-- 1 uid1 group1 566906880 Jan  6 14:34 core.16123
-rw-r--r-- 1 uid1 group1 568340480 Jan  6 15:32 core.16789
...
file core.16123
core.16123: ELF 64-bit LSB core file x86-64, version 1 (SYSV), SVR4-style, from '/xxx/xxx/xxx/xxx/bin/httpd -f /xxx/xxx/xxx/xxx/xxx/conf/h', real uid: 1234, effective uid: 1234, real gid: 12345, effective gid: 12345, execfn: '/xxx/xxx/xxx/xxx/xxx/bin/httpd', platform: 'x86_64'

now 2019-03-09 - different libs

$ gdb /xxx/xxx/xxx/xxx/bin/httpd core.16123
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-110.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-redhat-linux-gnu".
For bug reporting instructions, please see:
<http://uid1.gnu.org/software/gdb/bugs/>...
Reading symbols from /xxx/xxx/xxx/bin/httpd...(no debugging symbols found)...done.

warning: exec file is newer than core file.
[New LWP 15147]
[New LWP 15152]
[New LWP 15154]
[New LWP 15158]
[New LWP 15166]
[New LWP 15160]
[New LWP 15190]
[New LWP 15162]
[New LWP 15156]
[New LWP 15164]
[New LWP 15199]
[New LWP 15150]
[New LWP 15131]
[New LWP 15203]
[New LWP 15149]
[New LWP 15129]
[New LWP 15207]
[New LWP 15143]
[New LWP 15245]
[New LWP 15214]
[New LWP 15141]
[New LWP 15238]
[New LWP 15220]
[New LWP 15139]
[New LWP 15236]
[New LWP 15222]
[New LWP 15115]
[New LWP 15232]
[New LWP 15228]
[New LWP 15234]
[New LWP 15230]
[New LWP 15218]
[New LWP 15215]
[New LWP 15243]
[New LWP 15205]
[New LWP 15224]
[New LWP 15244]
[New LWP 15185]
[New LWP 15212]
[New LWP 15246]
[New LWP 15172]
[New LWP 15169]
[New LWP 15123]
[New LWP 15170]
[New LWP 15210]
[New LWP 15186]
[New LWP 15208]
[New LWP 15181]
[New LWP 15133]
[New LWP 15145]
[New LWP 15174]
[New LWP 15135]
[New LWP 15197]
[New LWP 15242]
[New LWP 15176]
[New LWP 15195]
[New LWP 15240]
[New LWP 15178]
[New LWP 15247]
[New LWP 15188]
[New LWP 15216]
[New LWP 15183]
[New LWP 15115]
[New LWP 15201]
[New LWP 15192]
[New LWP 15137]

warning: .dynamic section for "/lib64/libssl3.so" is not at the expected address (wrong library or version mismatch?)
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
Core was generated by `/xxx/xxx/xxx/xxx/bin/httpd -f /xxx/xxx/xxx/xxx/conf/h'.
Program terminated with signal 11, Segmentation fault.
#0  0x00007f583f9f1234in SSL_get_srp_username () from /xxx/xxx/xxx/lib/libssl.so.1.0.0
Missing separate debuginfos, use: debuginfo-install cyrus-sasl-lib-2.1.26-23.el7.x86_64 expat-2.1.0-10.el7_3.x86_64 glibc-2.17-222.el7.x86_64 ... zlib-1.2.7-17.el7.x86_64

(gdb) where
#0  0x00007f583f9f8797 in SSL_get_srp_username () from/xxx/xxx/xxx/lib/libssl.so.1.0.0
#1  0x00007f583fc2d890 in ssl_hook_Access () from /xxx/xxx/xxx/xxx/modules/mod_ssl.so
#2  0x00000000004474d0 in ap_run_access_checker ()
#3  0x000000000044a145 in ap_process_request_internal ()
#4  0x0000000000467448 in ap_process_async_request ()
#5  0x000000000046772f in ap_process_request ()
#6  0x00000000004637b5 in ap_process_http_connection ()
#7  0x000000000045aa10 in ap_run_process_connection ()
#8  0x000000000046e513 in worker_thread ()
#9  0x00007f5847d74dd5 in start_thread () from /lib64/libpthread.so.0
#10 0x00007f584789ab3d in clone () from /lib64/libc.so.6

info threads
....
(gdb) info threads
  Id   Target Id         Frame
  66   Thread 0x7f58367fc700 (LWP 26137) 0x00007f5847d78945 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
...
* 1    Thread 0x7f5833ff7700 (LWP 26147) 0x00007f583f9f8797 in SSL_get_srp_username () from /xxx/xxx/xxx/lib/libssl.so.1.0.0

(so you can see root cause in openssl instead of other 50+ modules ...)





